//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.16

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "eve_faction")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub faction_id: i64,
    pub corporation_id: Option<i32>,
    pub militia_corporation_id: Option<i32>,
    #[sea_orm(column_type = "Text")]
    pub description: String,
    pub is_unique: bool,
    pub name: String,
    pub size_factor: i32,
    pub solar_system_id: Option<i64>,
    pub station_count: i64,
    pub station_system_count: i64,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::eve_alliance::Entity")]
    EveAlliance,
    #[sea_orm(has_many = "super::eve_character::Entity")]
    EveCharacter,
    #[sea_orm(
        belongs_to = "super::eve_corporation::Entity",
        from = "Column::CorporationId",
        to = "super::eve_corporation::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    EveCorporation2,
    #[sea_orm(
        belongs_to = "super::eve_corporation::Entity",
        from = "Column::MilitiaCorporationId",
        to = "super::eve_corporation::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    EveCorporation1,
}

impl Related<super::eve_alliance::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EveAlliance.def()
    }
}

impl Related<super::eve_character::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EveCharacter.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
