//! `SeaORM` Entity, @generated by sea-orm-codegen 2.0.0-rc.11
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "eve_corporation")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub corporation_id: i64,
    pub alliance_id: Option<i32>,
    pub faction_id: Option<i32>,
    pub ceo_id: i64,
    pub creator_id: i64,
    pub date_founded: Option<DateTime>,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    pub home_station_id: Option<i64>,
    pub member_count: i64,
    pub name: String,
    pub shares: Option<i64>,
    #[sea_orm(column_type = "Double")]
    pub tax_rate: f64,
    pub ticker: String,
    pub url: Option<String>,
    pub war_eligible: Option<bool>,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::eve_alliance::Entity",
        from = "Column::AllianceId",
        to = "super::eve_alliance::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    EveAlliance,
    #[sea_orm(has_many = "super::eve_character::Entity")]
    EveCharacter,
    #[sea_orm(
        belongs_to = "super::eve_faction::Entity",
        from = "Column::FactionId",
        to = "super::eve_faction::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    EveFaction,
}

impl Related<super::eve_alliance::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EveAlliance.def()
    }
}

impl Related<super::eve_character::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EveCharacter.def()
    }
}

impl Related<super::eve_faction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EveFaction.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
